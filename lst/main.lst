C51 COMPILER V9.60.0.0   MAIN                                                              06/24/2023 16:47:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.\sou
                    -rce;.\include) DEBUG PRINT(.\lst\main.lst) TABS(2) OBJECT(.\output\main.obj)

line level    source

   1          
   2          #ifndef _MAIN_C_
   3          #define _MAIN_C_
   4          /*********************************************************************************************************
             -************/
   5          #include "include/ca51f_config.h"   
   6          #include "include/ca51f2sfr.h"
   7          #include "include/ca51f2xsfr.h"
   8          #include "include/gpiodef_f2.h"
   9          #include "include/system_clock.h"
  10          
  11          #include "include/uart.h"
  12          #include "include/lcd_led.h"
  13          #include "include/delay.h"
  14          #include "include/lcd.h"
*** WARNING C318 IN LINE 14 OF source\main.c: can't open file 'include/lcd.h'
  15          #include "include/key.h"
  16          #include "include/gpio.h"
  17          #include "include/gxhtc.h"
  18          #include "include/rtc.h"
  19          #include <intrins.h>
  20          #include "include/pwm.h"
  21          
  22          
  23          /*********************************************************************************************************
             -************      
  24            本例程实现4com*9seg、1/3bias LCD显示功能，LCD时钟设置为XOSCL或IRCL，实现LCD最小电流模式。
  25            
  26            重要提示：
  27            在关闭LCD功能前，把所设置的COM脚和SEG脚设置为输出模式并输出低电平，可以避免关闭LCD功能时LCD屏出现拖影现象
             -。
  28          **********************************************************************************************************
             -***********/      
  29          
  30          void main(void)
  31          {
  32   1      extern float GXHTC3_temp,GXHTC3_humi;
  33   1      extern bit HalfSecFlag;
  34   1      extern bit AlarmEvFlag;
  35   1      extern bit millisecondFlag;
  36   1      extern uint8_t times10Flag;
  37   1        unsigned char i;
  38   1        uint8_t ab = 0;
  39   1        uint16_t a,b,c,d,e,f,g=0;
  40   1      #ifdef LVD_RST_ENABLE
  41   1        LVDCON = 0xE1;          //设置LVD复位电压为2V
  42   1      #endif  
  43   1        
  44   1      #if (SYSCLK_SRC == PLL)
                Sys_Clk_Set_PLL(PLL_Multiple);  //设置系统时钟为PLL，PLL_Multiple为倍频倍数
              #endif
  47   1        
  48   1      #ifdef UART0_EN
                Uart0_Initial(UART0_BAUTRATE);  //初始化UART0
C51 COMPILER V9.60.0.0   MAIN                                                              06/24/2023 16:47:36 PAGE 2   

              #endif
  51   1        
  52   1      #ifdef UART1_EN
  53   1        Uart1_Initial(UART1_BAUTRATE);  //初始化UART1
  54   1      #endif
  55   1      
  56   1      #ifdef UART2_EN
                Uart2_Initial(UART2_BAUTRATE);  //初始化UART2
              #endif
  59   1      
  60   1        EA = 1;                         //开全局中断
  61   1      
  62   1      #ifdef PRINT_EN
  63   1        uart_printf("LCD Power Saving Mode Demo Code\n");
  64   1      #endif
  65   1      
  66   1        
  67   1      //  P72F = P72_XOSCL_IN_SETTING;      //设置P72为晶振引脚
  68   1      //  P71F = P71_XOSCL_OUT_SETTING;     //设置P71为晶振引脚
  69   1      //  CKCON |= XLCKE;             //使能XSOCL
  70   1      //  while(!(CKCON & XLSTA));        //等待XSOCL稳定
  71   1      //  
  72   1      ////  CKCON |= ILCKE;             //使能IRCL
  73   1      
  74   1      //  LXDIVH = 0;       //设置LCD时钟分频，目标帧频率为64HZ
  75   1      //  LXDIVL = 0; 
  76   1      //  LXCAD = 0;
  77   1      //  LXCFG =  DMOD(DMOD_5ua) | BIAS(BIAS_1_3) | LDRV(LDRV_7);      //设置LCD驱动电流、偏压(bias)、辉度
  78   1      //  LXCON =  LEN(LEN_XOSCL) | LMOD(LMOD_lcd);             //设置LCD时钟源为XOSCL，选择LCD模式
  79   1      ////  LXCON =  LEN(LEN_IRCL) | LMOD(LMOD_lcd);              //设置LCD时钟源为IRCL，选择LCD模式
  80   1      //  
  81   1      //  //设置LCD全显
  82   1      //  for(i = 0; i < 9; i++)
  83   1      //  {
  84   1      //    INDEX = i;
  85   1      //    LXDAT = 0xFF;
  86   1      //  }
  87   1      
  88   1      ////  LCD_Off();
  89   1      //  
  90   1      //  I2CCON = 0;           //关闭I2C，否则系统时钟无法关闭
  91   1      //  CKCON = XLCKE;          //关闭除LCD时钟外的其他时钟
  92   1      ////  CKCON = ILCKE;  
  93   1      //  PWCON &= ~0x08;         //LDO进入低功率模式
  94   1      //  
  95   1      //  PCON = (PCON&0x84) | 0x02;      //进入STOP模式
  96   1      //  _nop_();
  97   1      //  _nop_();
  98   1      //  _nop_();
  99   1      GXHTC3_INIT();  
 100   1      PWM6_init();
 101   1      GPIO_init();
 102   1      KEY_init();
 103   1      INT2_Init();
 104   1      INT3_Init();
 105   1      INT4_Init();
 106   1      INT5_Init();
 107   1      RTC_init();
 108   1      
 109   1      RTC_Set(2023,6,17,14,37,0);
 110   1      
 111   1        while(1)
C51 COMPILER V9.60.0.0   MAIN                                                              06/24/2023 16:47:36 PAGE 3   

 112   1        {
 113   2      //      get_gxth30(); 
 114   2      //    PWMEN  = (1<<PWM_CH6);    //PWM6使能    
 115   2      //    Delay_ms(10);
 116   2      //    PWMEN  = ~(1<<PWM_CH6);   //PWM6禁用  
 117   2      //    Delay_ms(1000); 
 118   2          if(times10Flag ==1)
 119   2          {
 120   3            times10Flag = 0;
 121   3            Key_Scanf();
 122   3          }
 123   2          if(ab == 0)
 124   2            {
 125   3              P32F = OUTPUT;          //P32设置为推挽输出模式 
 126   3              P32 = 1;
 127   3              ab = 1;
 128   3            }
 129   2            else
 130   2            {
 131   3              ab = 0;
 132   3              P32F = OUTPUT;          //P32设置为推挽输出模式 
 133   3              P32 = 0;
 134   3            }
 135   2      
 136   2          if(HalfSecFlag) //半秒打印当前时间
 137   2          {
 138   3            HalfSecFlag = 0;
 139   3        #ifdef PRINT_EN
 140   3            RTC_Get();
 141   3      //      uart_printf("%d-%d-%d %d:%d:%d ( %d )\n",calendar.w_year,calendar.w_month,calendar.w_date,calendar.ho
             -ur,calendar.min,calendar.sec,calendar.week);  
 142   3            a=calendar.w_year;
 143   3            b=calendar.w_month;   
 144   3            c=calendar.w_date;    
 145   3              d=calendar.week;
 146   3            e=calendar.hour;
 147   3            f=calendar.min;
 148   3            g=calendar.sec;
 149   3            uart_printf("%d/%d/%d-[%d]  %d:%d:%d\n",a,b,c,d,e,f,g); 
 150   3              
 151   3        #endif    
 152   3          }
 153   2      /*    
 154   2          if(AlarmEvFlag) //闹钟中断产生时打印
 155   2          {
 156   2            AlarmEvFlag = 0;
 157   2        #ifdef PRINT_EN
 158   2            uart_printf("Alarm event happen!\n"); 
 159   2        #endif    
 160   2          }
 161   2      */    
 162   2        }
 163   1      }
*** WARNING C280 IN LINE 37 OF source\main.c: 'i': unreferenced local variable
 164          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    343    ----
   CONSTANT SIZE    =     58    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              06/24/2023 16:47:36 PAGE 4   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)

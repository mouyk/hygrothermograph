C51 COMPILER V9.60.0.0   GXHTC3                                                            05/26/2023 10:48:07 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GXHTC3
OBJECT MODULE PLACED IN .\output\gxhtc3.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE source\gxhtc3.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.\source)
                    - DEBUG PRINT(.\lst\gxhtc3.lst) OBJECT(.\output\gxhtc3.obj)

line level    source

   1          #ifndef _GXHTC3_C_
   2          #define _GXHTC3_C_
   3          #include "include/ca51f_config.h"               
   4          #include "include/ca51f2sfr.h"
   5          #include "include/ca51f2xsfr.h"
   6          #include "include/gpiodef_f2.h"
   7          #include "include/system_clock.h"
   8          
   9          #include "include/uart.h"
  10          #include "include/lcd_led.h"
  11          #include "include/delay.h"
  12          #include "include/lcd.h"
*** WARNING C318 IN LINE 12 OF source\gxhtc3.c: can't open file 'include/lcd.h'
  13          #include "include/gpio.h"
*** WARNING C318 IN LINE 13 OF source\gxhtc3.c: can't open file 'include/gpio.h'
  14          #include "include/gxhtc3.h"
  15          #include <intrins.h>
  16          
  17          
  18          #define write 0
  19          #define read  1
  20          float GXHTC3_temp,GXHTC3_humi,GXHTC3_Temperature,GXHTC3_Humidity;
  21          
  22          /****************************************************************************
  23          * Function Name  : GXHTC3_INIT
  24          * Description    : 初始化GPIO.
  25          * Input          : None
  26          * Output         : None
  27          * Return         : None
  28          ****************************************************************************/
  29          void GXHTC3_INIT()
  30          {       
  31   1              P36F = OUTPUT|OP_EN;
  32   1              P37F = OUTPUT|OP_EN;            
  33   1      
  34   1              GXHTC3_SCL_H;
  35   1              GXHTC3_SDA_H;
  36   1      }
  37          
  38          /*******************************************************************************
  39          * 函 数 名         : GXHTC3_SDA_OUT
  40          * 函数功能                 : SDA输出配置           
  41          * 输    入         : 无
  42          * 输    出         : 无
  43          *******************************************************************************/
  44          void GXHTC3_SDA_OUT()
  45          {
  46   1              P36F = OUTPUT|OP_EN;
  47   1              //P37F = OUTPUT|OP_EN;          
  48   1      }
  49          
  50          /*******************************************************************************
  51          * 函 数 名         : GXHTC3_SDA_IN
  52          * 函数功能                 : SDA输入配置           
C51 COMPILER V9.60.0.0   GXHTC3                                                            05/26/2023 10:48:07 PAGE 2   

  53          * 输    入         : 无
  54          * 输    出         : 无
  55          *******************************************************************************/
  56          void GXHTC3_SDA_IN(void)
  57          {
  58   1              P36F = INPUT;   
  59   1      }
  60          
  61          void GXHTC3_SDA_in(void)
  62          {
  63   1              P36F = INPUT;           
  64   1      }
  65          //产生起始信号
  66          void GXHTC3_StarT(void)
  67          {
  68   1        GXHTC3_SDA_OUT();
  69   1              
  70   1              GXHTC3_SDA_H;
  71   1              GXHTC3_SCL_H;
  72   1              delay_us(5);
  73   1              GXHTC3_SDA_L;
  74   1              delay_us(6);
  75   1              GXHTC3_SCL_L;
  76   1      }
  77          
  78          //产生停止信号
  79          void GXHTC3_StoP(void)
  80          {
  81   1         GXHTC3_SDA_OUT();
  82   1      
  83   1         GXHTC3_SCL_L;
  84   1         GXHTC3_SDA_L;
  85   1         GXHTC3_SCL_H;
  86   1         delay_us(6);
  87   1         GXHTC3_SDA_H;
  88   1         delay_us(6);
  89   1      }
  90          
  91          //主机产生应答信号ACK
  92          void GXHTC3_Ack(void)
  93          {
  94   1         GXHTC3_SCL_L;
  95   1         GXHTC3_SDA_OUT();
  96   1         GXHTC3_SDA_L;
  97   1         delay_us(2);
  98   1         GXHTC3_SCL_H;
  99   1         delay_us(5);
 100   1         GXHTC3_SCL_L;
 101   1      }
 102          
 103          //主机不产生应答信号NACK
 104          void GXHTC3_NAck(void)
 105          {
 106   1         GXHTC3_SCL_L;
 107   1         GXHTC3_SDA_OUT();
 108   1         GXHTC3_SDA_H;
 109   1         delay_us(2);
 110   1         GXHTC3_SCL_H;
 111   1         delay_us(5);
 112   1         GXHTC3_SCL_L;
 113   1      }
 114          //等待从机应答信号
C51 COMPILER V9.60.0.0   GXHTC3                                                            05/26/2023 10:48:07 PAGE 3   

 115          //返回值：1 接收应答失败
 116          //                      0 接收应答成功
 117          uint8_t GXHTC3_Wait_Ack(void)
 118          {
 119   1              uint8_t tempTime=0;
 120   1              GXHTC3_SDA_IN();
 121   1              GXHTC3_SDA_H;
 122   1              delay_us(1);
 123   1              GXHTC3_SCL_H;
 124   1              delay_us(1);
 125   1      
 126   1              while(P36)
 127   1              {
 128   2                      tempTime++;
 129   2                      delay_us(1);
 130   2                      if(tempTime>250)
 131   2                      {
 132   3                              GXHTC3_StoP();
 133   3                              return 1;
 134   3                      }        
 135   2              }
 136   1              GXHTC3_SCL_L;
 137   1              delay_us(1);
 138   1              return 0;
 139   1      }
 140          //GXHTC3 发送一个字节
 141          void GXHTC3_Send_Byte(uint8_t txd)
 142          {
 143   1              uint8_t i=0;
 144   1              GXHTC3_SDA_OUT();
 145   1              GXHTC3_SCL_L;//拉低时钟开始数据传输
 146   1      
 147   1              for(i=0;i<8;i++)
 148   1              {
 149   2                      if((txd&0x80)>0) //0x80  1000 0000
 150   2                              GXHTC3_SDA_H;
 151   2                      else
 152   2                              GXHTC3_SDA_L;
 153   2      
 154   2                      txd<<=1;
 155   2                      delay_us(1);
 156   2                      GXHTC3_SCL_H;
 157   2                      delay_us(2); //发送数据
 158   2                      GXHTC3_SCL_L;
 159   2                      delay_us(2);
 160   2              }
 161   1      }
 162          
 163          //GXHTC3 读取一个字节
 164          
 165          uint8_t GXHTC3_Read_Byte(uint8_t ack)
 166          {
 167   1         uint8_t i=0,receive=0;
 168   1      
 169   1         GXHTC3_SDA_in();
 170   1         for(i=0;i<8;i++)
 171   1         {
 172   2                      GXHTC3_SCL_L;
 173   2                      delay_us(2);
 174   2                      GXHTC3_SCL_H;
 175   2                      while(!P37);
 176   2                      receive<<=1;
C51 COMPILER V9.60.0.0   GXHTC3                                                            05/26/2023 10:48:07 PAGE 4   

 177   2                      if(P36)
 178   2                         receive++;
 179   2                      delay_us(1);    
 180   2         }
 181   1      
 182   1              if(ack==0)
 183   1                      GXHTC3_NAck();
 184   1              else
 185   1                      GXHTC3_Ack();
 186   1      
 187   1              return receive;
 188   1      }
 189          
 190          
 191          void GXHTC3_read_result(uint8_t addr)
 192          {
 193   1              uint16_t tem,hum;
 194   1              uint16_t buff[6];
 195   1      
 196   1              float Temperature=0;
 197   1              float Humidity=0;
 198   1                      
 199   1              GXHTC3_StarT();
 200   1              GXHTC3_Send_Byte(addr<<1 | write);//写7位GXHTC3设备地址加0作为写取位,1为读取位
 201   1              GXHTC3_Wait_Ack();
 202   1              GXHTC3_Send_Byte(0x7C);
 203   1              GXHTC3_Wait_Ack();
 204   1              GXHTC3_Send_Byte(0xA2);
 205   1              GXHTC3_Wait_Ack();
 206   1              GXHTC3_StoP();
 207   1              
 208   1              Delay_ms(15);
 209   1              
 210   1              GXHTC3_StarT();
 211   1              GXHTC3_Send_Byte(addr<<1 | read);//写7位GXHTC3设备地址加0作为写取位,1为读取位
 212   1              
 213   1              if(GXHTC3_Wait_Ack()==0)
 214   1              {
 215   2                      GXHTC3_SDA_in();
 216   2                              
 217   2                      buff[0]=GXHTC3_Read_Byte(1);
 218   2                      buff[1]=GXHTC3_Read_Byte(1);
 219   2                      buff[2]=GXHTC3_Read_Byte(1);
 220   2                      buff[3]=GXHTC3_Read_Byte(1);
 221   2                      buff[4]=GXHTC3_Read_Byte(1);
 222   2                      buff[5]=GXHTC3_Read_Byte(0);
 223   2                      GXHTC3_StoP();
 224   2                      
 225   2                      tem = ((buff[0]<<8) | buff[1]);//温度拼接
 226   2                      hum = ((buff[3]<<8) | buff[4]);//湿度拼接
 227   2                      /*转换实际温度*/
 228   2                      Temperature= (175.0*(float)tem/65535.0-45.0) ;// T = -45 + 175 * tem / (2^16-1)
 229   2                      Humidity= (100.0*(float)hum/65535.0);// RH = hum*100 / (2^16-1)
 230   2      }
 231   1              
 232   1              if((Temperature>=-20)&&(Temperature<=125)&&(Humidity>=0)&&(Humidity<=100))//过滤错误数据
 233   1              {
 234   2                      GXHTC3_temp = Temperature;
 235   2                      GXHTC3_humi = Humidity;
 236   2              }
 237   1      
 238   1              tem = 0;
C51 COMPILER V9.60.0.0   GXHTC3                                                            05/26/2023 10:48:07 PAGE 5   

 239   1              hum = 0;
 240   1      }
 241          
 242          void al_float_buffer_sort(float *buf, uint8_t length)
 243          {
 244   1              uint8_t i, j;
 245   1              float tmp;
 246   1              for (i = 0; i < length; i++)
 247   1              {
 248   2                      for (j = i + 1; j < length; j++)
 249   2                      {
 250   3                              if (buf[j] < buf[i])
 251   3                              {
 252   4                                      tmp = buf[j];
 253   4                                      buf[j] = buf[i];
 254   4                                      buf[i] = tmp;
 255   4                              }
 256   3                      }
 257   2              }
 258   1      }
 259          
 260          void getgxth30(void)
 261          {
 262   1      //      float buff_temp[20],buff_humi[20];
 263   1      //      uint8_t i;
 264   1      //      for(i = 0;i < 10;i++)
 265   1      //      {       
 266   1      //              GXHTC3_read_result(0x70);
 267   1      //              buff_temp[i] = GXHTC3_temp;
 268   1      //              buff_humi[i] = GXHTC3_humi;
 269   1      //      }
 270   1      //      
 271   1      //      al_float_buffer_sort(buff_temp,10);
 272   1      //      al_float_buffer_sort(buff_humi,10);
 273   1              
 274   1      //      GXHTC3_Temperature = (buff_temp[4] + buff_temp[5]) / 2;
 275   1      //      GXHTC3_Humidity = (buff_humi[4] + buff_humi[5]) / 2;
 276   1              
 277   1      //      printf("温度：%0.2f, 湿度：%0.2f",GXHTC3_Temperature,GXHTC3_Humidity);
 278   1      }
 279          
 280          
 281          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    895    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.60.0.0   GXHTC                                                             06/24/2023 14:59:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GXHTC
OBJECT MODULE PLACED IN .\output\gxhtc.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE source\gxhtc.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.\so
                    -urce;.\include) DEBUG PRINT(.\lst\gxhtc.lst) TABS(2) OBJECT(.\output\gxhtc.obj)

line level    source

   1          #ifndef _GXHTC3_C_
   2          #define _GXHTC3_C_
   3          #include "include/ca51f_config.h"   
   4          #include "include/ca51f2sfr.h"
   5          #include "include/ca51f2xsfr.h"
   6          #include "include/gpiodef_f2.h"
   7          #include "include/system_clock.h"
   8          
   9          #include "include/uart.h"
  10          #include "include/lcd_led.h"
  11          #include "include/delay.h"
  12          #include "include/lcd.h"
*** WARNING C318 IN LINE 12 OF source\gxhtc.c: can't open file 'include/lcd.h'
  13          #include "include/gpio.h"
  14          #include "include/gxhtc.h"
  15          #include <intrins.h>
  16          #include "stdio.h"
  17          
  18          #define write 0
  19          #define read  1
  20          float GXHTC3_temp,GXHTC3_humi,GXHTC3_Temperature,GXHTC3_Humidity;
  21          
  22          /****************************************************************************
  23          * Function Name  : GXHTC3_INIT
  24          * Description    : 初始化GPIO.
  25          * Input          : None
  26          * Output         : None
  27          * Return         : None
  28          ****************************************************************************/
  29          void GXHTC3_INIT()
  30          { 
  31   1        P36F = OUTPUT;//|OP_EN;
  32   1        P37F = OUTPUT;//|OP_EN;   
  33   1      
  34   1        GXHTC3_SCL_H;
  35   1        GXHTC3_SDA_H;
  36   1      }
  37          
  38          /*******************************************************************************
  39          * 函 数 名         : GXHTC3_SDA_OUT
  40          * 函数功能       : SDA输出配置     
  41          * 输    入         : 无
  42          * 输    出         : 无
  43          *******************************************************************************/
  44          void GXHTC3_SDA_OUT()
  45          {
  46   1        P36F = OUTPUT|OP_EN;
  47   1        //P37F = OUTPUT|OP_EN;    
  48   1      }
  49          
  50          /*******************************************************************************
  51          * 函 数 名         : GXHTC3_SDA_IN
  52          * 函数功能       : SDA输入配置     
  53          * 输    入         : 无
C51 COMPILER V9.60.0.0   GXHTC                                                             06/24/2023 14:59:06 PAGE 2   

  54          * 输    出         : 无
  55          *******************************************************************************/
  56          
  57          void GXHTC3_SDA_IN(void)
  58          {
  59   1        P36F = INPUT; 
  60   1      }
  61          
  62          //void GXHTC3_SDA_in(void)
  63          //{
  64          //  P36F = INPUT;   
  65          //}
  66          //产生起始信号
  67          void GXHTC3_StarT(void)
  68          {
  69   1        GXHTC3_SDA_OUT();
  70   1        
  71   1        GXHTC3_SDA_H;
  72   1        GXHTC3_SCL_H;
  73   1        delay_us(5);
  74   1        GXHTC3_SDA_L;
  75   1        delay_us(6);
  76   1        GXHTC3_SCL_L;
  77   1      }
  78          
  79          //产生停止信号
  80          void GXHTC3_StoP(void)
  81          {
  82   1         GXHTC3_SDA_OUT();
  83   1      
  84   1         GXHTC3_SCL_L;
  85   1         GXHTC3_SDA_L;
  86   1         GXHTC3_SCL_H;
  87   1         delay_us(6);
  88   1         GXHTC3_SDA_H;
  89   1         delay_us(6);
  90   1      }
  91          
  92          //主机产生应答信号ACK
  93          void GXHTC3_Ack(void)
  94          {
  95   1         GXHTC3_SCL_L;
  96   1         GXHTC3_SDA_OUT();
  97   1         GXHTC3_SDA_L;
  98   1         delay_us(2);
  99   1         GXHTC3_SCL_H;
 100   1         delay_us(5);
 101   1         GXHTC3_SCL_L;
 102   1      }
 103          
 104          //主机不产生应答信号NACK
 105          void GXHTC3_NAck(void)
 106          {
 107   1         GXHTC3_SCL_L;
 108   1         GXHTC3_SDA_OUT();
 109   1         GXHTC3_SDA_H;
 110   1         delay_us(2);
 111   1         GXHTC3_SCL_H;
 112   1         delay_us(5);
 113   1         GXHTC3_SCL_L;
 114   1      }
 115          //等待从机应答信号
C51 COMPILER V9.60.0.0   GXHTC                                                             06/24/2023 14:59:06 PAGE 3   

 116          //返回值：1 接收应答失败
 117          //        0 接收应答成功
 118          uint8_t GXHTC3_Wait_Ack(void)
 119          {
 120   1        uint8_t tempTime=0;
 121   1        GXHTC3_SDA_IN();
 122   1        GXHTC3_SDA_H;
 123   1        delay_us(1);
 124   1        GXHTC3_SCL_H;
 125   1        delay_us(1);
 126   1      
 127   1        while(P36)
 128   1        {
 129   2          tempTime++;
 130   2          delay_us(1);
 131   2          if(tempTime>250)
 132   2          {
 133   3            GXHTC3_StoP();
 134   3            return 1;
 135   3          }  
 136   2        }
 137   1        GXHTC3_SCL_L;
 138   1        delay_us(1);
 139   1        return 0;
 140   1      }
 141          //GXHTC3 发送一个字节
 142          void GXHTC3_Send_Byte(uint8_t txd)
 143          {
 144   1        uint8_t i=0;
 145   1        GXHTC3_SDA_OUT();
 146   1        GXHTC3_SCL_L;//拉低时钟开始数据传输
 147   1      
 148   1        for(i=0;i<8;i++)
 149   1        {
 150   2          if((txd&0x80)>0) //0x80  1000 0000
 151   2            GXHTC3_SDA_H;
 152   2          else
 153   2            GXHTC3_SDA_L;
 154   2      
 155   2          txd<<=1;
 156   2          delay_us(1);
 157   2          GXHTC3_SCL_H;
 158   2          delay_us(2); //发送数据
 159   2          GXHTC3_SCL_L;
 160   2          delay_us(2);
 161   2        }
 162   1      }
 163          
 164          //GXHTC3 读取一个字节
 165          
 166          uint8_t GXHTC3_Read_Byte(uint8_t ack)
 167          {
 168   1         uint8_t i=0,receive=0;
 169   1      
 170   1         GXHTC3_SDA_IN();
 171   1         for(i=0;i<8;i++)
 172   1         {
 173   2            GXHTC3_SCL_L;
 174   2          delay_us(2);
 175   2          GXHTC3_SCL_H;
 176   2          while(!P37);
 177   2          receive<<=1;
C51 COMPILER V9.60.0.0   GXHTC                                                             06/24/2023 14:59:06 PAGE 4   

 178   2          if(P36)
 179   2             receive++;
 180   2          delay_us(1);  
 181   2         }
 182   1      
 183   1          if(ack==0)
 184   1            GXHTC3_NAck();
 185   1        else
 186   1          GXHTC3_Ack();
 187   1      
 188   1        return receive;
 189   1      }
 190          
 191          
 192          void GXHTC3_read_result(uint8_t addr)
 193          {
 194   1        uint16_t tem,hum;
 195   1        uint16_t buff[6];
 196   1      
 197   1        float Temperature=0;
 198   1        float Humidity=0;
 199   1          
 200   1        GXHTC3_StarT();
 201   1        GXHTC3_Send_Byte(addr<<1 | write);//写7位GXHTC3设备地址加0作为写取位,1为读取位
 202   1        GXHTC3_Wait_Ack();
 203   1        GXHTC3_Send_Byte(0x7C);
 204   1        GXHTC3_Wait_Ack();
 205   1        GXHTC3_Send_Byte(0xA2);
 206   1        GXHTC3_Wait_Ack();
 207   1        GXHTC3_StoP();
 208   1        
 209   1        Delay_ms(15);
 210   1        
 211   1        GXHTC3_StarT();
 212   1        GXHTC3_Send_Byte(addr<<1 | read);//写7位GXHTC3设备地址加0作为写取位,1为读取位
 213   1        
 214   1        if(GXHTC3_Wait_Ack()==0)
 215   1        {
 216   2          GXHTC3_SDA_IN();
 217   2            
 218   2          buff[0]=GXHTC3_Read_Byte(1);
 219   2          buff[1]=GXHTC3_Read_Byte(1);
 220   2          buff[2]=GXHTC3_Read_Byte(1);
 221   2          buff[3]=GXHTC3_Read_Byte(1);
 222   2          buff[4]=GXHTC3_Read_Byte(1);
 223   2          buff[5]=GXHTC3_Read_Byte(0);
 224   2          GXHTC3_StoP();
 225   2          
 226   2          tem = ((buff[0]<<8) | buff[1]);//温度拼接
 227   2          hum = ((buff[3]<<8) | buff[4]);//湿度拼接
 228   2          /*转换实际温度*/
 229   2          Temperature= (175.0*(float)tem/65535.0-45.0) ;// T = -45 + 175 * tem / (2^16-1)
 230   2          Humidity= (100.0*(float)hum/65535.0);// RH = hum*100 / (2^16-1)
 231   2        }
 232   1        
 233   1        if((Temperature>=-20)&&(Temperature<=125)&&(Humidity>=0)&&(Humidity<=100))//过滤错误数据
 234   1        {
 235   2          GXHTC3_temp = Temperature;
 236   2          GXHTC3_humi = Humidity;
 237   2        }
 238   1      
 239   1        tem = 0;
C51 COMPILER V9.60.0.0   GXHTC                                                             06/24/2023 14:59:06 PAGE 5   

 240   1        hum = 0;
 241   1      }
 242          
 243          void al_float_buffer_sort(float *buf, uint8_t length)
 244          {
 245   1        uint8_t i, j;
 246   1        float tmp;
 247   1        for (i = 0; i < length; i++)
 248   1        {
 249   2          for (j = i + 1; j < length; j++)
 250   2          {
 251   3            if (buf[j] < buf[i])
 252   3            {
 253   4              tmp = buf[j];
 254   4              buf[j] = buf[i];
 255   4              buf[i] = tmp;
 256   4            }
 257   3          }
 258   2        }
 259   1      }
 260          
 261          void get_gxth30(void)
 262          {
 263   1      /* 加滤波
 264   1        float buff_temp[5]={0,0,0,0,0},buff_humi[5]={0,0,0,0,0};
 265   1        uint8_t i=0;
 266   1        for(i = 0;i < 5;i++)
 267   1        { 
 268   1          GXHTC3_read_result(0x70);
 269   1          buff_temp[i] = GXHTC3_temp;
 270   1          buff_humi[i] = GXHTC3_humi;
 271   1        }
 272   1        
 273   1        al_float_buffer_sort(buff_temp,5);
 274   1        al_float_buffer_sort(buff_humi,5);
 275   1        
 276   1        GXHTC3_Temperature = (buff_temp[2] + buff_temp[4]) / 2;
 277   1        GXHTC3_Humidity = (buff_humi[2] + buff_humi[4]) / 2;
 278   1        
 279   1        uart_printf("Temp=%f ||| Humi=%f /n",GXHTC3_temp,GXHTC3_humi);
 280   1      */
 281   1        
 282   1      ///* 不加滤波
 283   1      
 284   1        float temp=0,humi=0;
 285   1        uint8_t i=0;
 286   1        for(i = 0;i < 5;i++)
 287   1        { 
 288   2          GXHTC3_read_result(0x70);
 289   2          temp+=GXHTC3_temp;
 290   2          humi+=GXHTC3_humi;
 291   2        }
 292   1        
 293   1        GXHTC3_temp = temp / 5;
 294   1        GXHTC3_humi = humi / 5;
 295   1        
 296   1        uart_printf("Temp=%0.2f ||| Humi=%0.2f \n",GXHTC3_temp,GXHTC3_humi);
 297   1      //*/  
 298   1        
 299   1      }
 300          
 301          
C51 COMPILER V9.60.0.0   GXHTC                                                             06/24/2023 14:59:06 PAGE 6   

 302          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1300    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =     16      50
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCU_API
OBJECT MODULE PLACED IN .\output\mcu_api.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE mcu_sdk\mcu_api.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include;.
                    -\source;.\include) DEBUG PRINT(.\lst\mcu_api.lst) TABS(2) OBJECT(.\output\mcu_api.obj)

line level    source

   1          /**
   2          * @file  mcu_api.c
   3          * @brief this file contains basic fuctions and DP data report fucntion which is base on DP type
   4          * @author qinlang
   5          * @date 2022.05.06
   6          * @par email:qinlang.chen@tuya.com
   7          * @copyright HANGZHOU TUYA INFORMATION TECHNOLOGY CO.,LTD
   8          * @par company
   9          * http://www.tuya.com
  10          */
  11          
  12          #include "zigbee.h"
  13          
  14          /**
  15          * @brief hex translate to bcd 
  16          * @param[in] {Value_H} higher bits data 
  17          * @param[in] {Value_L} lower bits data
  18          * @return  bcd type data
  19          */
  20          unsigned char hex_to_bcd(unsigned char Value_H,unsigned char Value_L)
  21          {
  22   1        unsigned char bcd_value;
  23   1        
  24   1        if((Value_H >= '0') && (Value_H <= '9')){
  25   2          Value_H -= '0';
  26   2        }
  27   1        else if((Value_H >= 'A') && (Value_H <= 'F')){
  28   2          Value_H = Value_H - 'A' + 10;
  29   2        }
  30   1        else if((Value_H >= 'a') && (Value_H <= 'f')){
  31   2          Value_H = Value_H - 'a' + 10;
  32   2        }
  33   1      
  34   1        bcd_value = Value_H & 0x0f;
  35   1        bcd_value <<= 4;
  36   1      
  37   1        if((Value_L >= '0') && (Value_L <= '9')){
  38   2          Value_L -= '0';
  39   2        }
  40   1        else if((Value_L >= 'A') && (Value_L <= 'F')){
  41   2          Value_L = Value_L - 'a' + 10;
  42   2        }
  43   1        else if((Value_L >= 'a') && (Value_L <= 'f')){
  44   2          Value_L = Value_L - 'a' + 10;
  45   2        }
  46   1        
  47   1        bcd_value |= Value_L & 0x0f;
  48   1      
  49   1        return bcd_value;
  50   1      }
  51          
  52          /**
  53          * @brief get string len 
  54          * @param[in] {str} higher bits data 
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 2   

  55          * @return string len 
  56          */
  57          unsigned long my_strlen(unsigned char *str)  
  58          {
  59   1        unsigned long len = 0;
  60   1        if(str == NULL){ 
  61   2          return 0;
  62   2        }
  63   1        
  64   1        for(len = 0; *str ++ != '\0'; ){
  65   2          len ++;
  66   2        }
  67   1        
  68   1        return len;
  69   1      }
  70          
  71          /**
  72          * @brief  assign ch to the first count bytes of the memory address src
  73          * @param[in] {src}    srouce address
  74          * @param[in] {ch}     set value 
  75          * @param[in] {count}  length of set address 
  76          * @return void
  77          */
  78          void *my_memset(void *src,unsigned char ch,unsigned short count)
  79          {
  80   1        unsigned char *tmp = (unsigned char *)src;
  81   1        if(src == NULL){
  82   2          return NULL;
  83   2        }
  84   1        
  85   1        while(count --){
  86   2          *tmp ++ = ch;
  87   2        }
  88   1        return src;
  89   1      }
  90          
  91          /**
  92          * @brief copy count bytes data from src to dest
  93          * @param[in] {src}    srouce address
  94          * @param[in] {dest}   destination address
  95          * @param[in] {count}  length of copy data
  96          * @return void
  97          */
  98          void *my_memcpy(void *dest, const void *src, unsigned short count)  
  99          {  
 100   1        unsigned char *pdest = (unsigned char *)dest;  
 101   1        const unsigned char *psrc  = (const unsigned char *)src;  
 102   1        unsigned short i;
 103   1        
 104   1        if(dest == NULL || src == NULL){ 
 105   2          return NULL;
 106   2        }
 107   1        
 108   1        if((pdest <= psrc) || (pdest > psrc + count)){  
 109   2          for(i = 0; i < count; i ++){  
 110   3            pdest[i] = psrc[i];  
 111   3          }  
 112   2        }
 113   1        else{
 114   2          for(i = count; i > 0; i --){  
 115   3            pdest[i - 1] = psrc[i - 1];  
 116   3          }  
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 3   

 117   2        }  
 118   1        
 119   1        return dest;  
 120   1      }
 121          
 122          /**
 123          * @brief copy string src to string dest
 124          * @param[in] {src}    srouce address
 125          * @param[in] {dest}   destination address
 126          * @return the tail of destination 
 127          */
 128          char *my_strcpy(char *dest, const char *src)  
 129          {
 130   1        char *p = dest;
 131   1        while(*src!='\0'){
 132   2          *dest++ = *src++;
 133   2        }
 134   1        *dest = '\0';
 135   1        return p;
 136   1      }
 137          
 138          /**
 139          * @brief compare string s1 with string s2
 140          * @param[in] {s1}  srouce address
 141          * @param[in] {s2}  destination address
 142          * @return compare result
 143          */
 144          int my_strcmp(char *s1 , char *s2)
 145          {
 146   1        while( *s1 && *s2 && *s1 == *s2 ){
 147   2          s1++;
 148   2          s2++;
 149   2        }
 150   1        return *s1 - *s2;
 151   1      }
 152          
 153          /**
 154          * @brief int translate to byte
 155          * @param[in] {number} int data 
 156          * @param[out] {value} the result array     
 157          * @return void
 158          */
 159          void int_to_byte(unsigned long number,unsigned char value[4])
 160          {
 161   1        value[0] = number >> 24;
 162   1        value[1] = number >> 16;
 163   1        value[2] = number >> 8;
 164   1        value[3] = number & 0xff;
 165   1      }
 166          
 167          /**
 168          * @brief byte data translate to int 
 169          * @param[in] {value}  the byte array 
 170          * @return result of int data 
 171          */
 172          unsigned long byte_to_int(const unsigned char value[4])
 173          {
 174   1        unsigned long nubmer = 0;
 175   1      
 176   1        nubmer = (unsigned long)value[0];
 177   1        nubmer <<= 8;
 178   1        nubmer |= (unsigned long)value[1];
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 4   

 179   1        nubmer <<= 8;
 180   1        nubmer |= (unsigned long)value[2];
 181   1        nubmer <<= 8;
 182   1        nubmer |= (unsigned long)value[3];
 183   1        
 184   1        return nubmer;
 185   1      }
 186          
 187          
 188          /**
 189          * @brief report bool type DP data to zigbee module 
 190          * @param[in]  {dpid}  dp id
 191          * @param[in]  {value} Data contents of dp 
 192          * @return send result 
 193          */
 194          unsigned char mcu_dp_bool_update(unsigned char dpid,unsigned char value)
 195          {
 196   1        unsigned short length = 0;
 197   1        
 198   1        length = set_zigbee_uart_byte(length,dpid);
 199   1        length = set_zigbee_uart_byte(length,DP_TYPE_BOOL);
 200   1       
 201   1        length = set_zigbee_uart_byte(length,0);
 202   1        length = set_zigbee_uart_byte(length,1);
 203   1      
 204   1        if(value == FALSE){
 205   2          length = set_zigbee_uart_byte(length,FALSE);
 206   2        }
 207   1        else{
 208   2          length = set_zigbee_uart_byte(length,1);
 209   2        }
 210   1        
 211   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 212   1        
 213   1        return SUCCESS;
 214   1      }
 215          
 216          
 217          /**
 218          * @brief report enum type DP data to zigbee module 
 219          * @param[in]  {dpid}  dp id
 220          * @param[in]  {value} Data contents of dp 
 221          * @return send result 
 222          */
 223          unsigned char mcu_dp_enum_update(unsigned char dpid,unsigned char value)
 224          {
 225   1        unsigned short length = 0;
 226   1        
 227   1        length = set_zigbee_uart_byte(length,dpid);
 228   1        length = set_zigbee_uart_byte(length,DP_TYPE_ENUM);
 229   1        //
 230   1        length = set_zigbee_uart_byte(length,0);
 231   1        length = set_zigbee_uart_byte(length,1);
 232   1        //
 233   1        length = set_zigbee_uart_byte(length,value);
 234   1        
 235   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 236   1        
 237   1        return SUCCESS;
 238   1      }
 239          
 240          
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 5   

 241          /**
 242          * @brief report bitmap type DP data to zigbee module 
 243          * @param[in]  {dpid}  dp id
 244          * @param[in]  {value} Data contents of dp 
 245          * @return send result 
 246          */
 247          unsigned char mcu_dp_bitmap_update(unsigned char dpid,unsigned long value)
 248          {
 249   1        unsigned short length = 0;
 250   1      
 251   1        length = set_zigbee_uart_byte(length,dpid);
 252   1        length = set_zigbee_uart_byte(length,DP_TYPE_BITMAP);
 253   1        //
 254   1        length = set_zigbee_uart_byte(length,0);
 255   1        
 256   1        if((value | 0xff) == 0xff){
 257   2          length = set_zigbee_uart_byte(length,1);
 258   2          length = set_zigbee_uart_byte(length,value);
 259   2        }
 260   1        else if((value | 0xffff) == 0xffff){
 261   2          length = set_zigbee_uart_byte(length,2);
 262   2          length = set_zigbee_uart_byte(length,value >> 8);
 263   2          length = set_zigbee_uart_byte(length,value & 0xff);
 264   2        }
 265   1        else{
 266   2          length = set_zigbee_uart_byte(length,4);
 267   2          length = set_zigbee_uart_byte(length,value >> 24);
 268   2          length = set_zigbee_uart_byte(length,value >> 16);
 269   2          length = set_zigbee_uart_byte(length,value >> 8);
 270   2          length = set_zigbee_uart_byte(length,value & 0xff);
 271   2        }    
 272   1        
 273   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 274   1      
 275   1        return SUCCESS;
 276   1      }
 277          
 278          
 279          /**
 280          * @brief report fault type DP data to zigbee module 
 281          * @param[in]  {dpid}  dp id
 282          * @param[in]  {value} Data contents of dp 
 283          * @return send result 
 284          */
 285          unsigned char mcu_dp_fault_update(unsigned char dpid,unsigned long value)
 286          {
 287   1        unsigned short length = 0;
 288   1      
 289   1        length = set_zigbee_uart_byte(length,dpid);
 290   1        length = set_zigbee_uart_byte(length,DP_TYPE_BITMAP);
 291   1        //
 292   1        length = set_zigbee_uart_byte(length,0);
 293   1        
 294   1        if((value | 0xff) == 0xff){
 295   2          length = set_zigbee_uart_byte(length,1);
 296   2          length = set_zigbee_uart_byte(length,value);
 297   2        }
 298   1        else if((value | 0xffff) == 0xffff){
 299   2          length = set_zigbee_uart_byte(length,2);
 300   2          length = set_zigbee_uart_byte(length,value >> 8);
 301   2          length = set_zigbee_uart_byte(length,value & 0xff);
 302   2        }
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 6   

 303   1        else{
 304   2          length = set_zigbee_uart_byte(length,4);
 305   2          length = set_zigbee_uart_byte(length,value >> 24);
 306   2          length = set_zigbee_uart_byte(length,value >> 16);
 307   2          length = set_zigbee_uart_byte(length,value >> 8);
 308   2          length = set_zigbee_uart_byte(length,value & 0xff);
 309   2        }    
 310   1        
 311   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 312   1      
 313   1        return SUCCESS;
 314   1      }
 315          
 316          /**
 317          * @brief report raw type DP data to zigbee module 
 318          * @param[in]  {dpid}  dp id
 319          * @param[in]  {value} Data contents of dp 
 320          * @param[in]  {len} length of Data contents  
 321          * @return send result 
 322          */
 323          unsigned char mcu_dp_raw_update(unsigned char dpid,const unsigned char value[],unsigned short len)
 324          {
 325   1        unsigned short length = 0;
 326   1        
 327   1        length = set_zigbee_uart_byte(length,dpid);
 328   1        length = set_zigbee_uart_byte(length,DP_TYPE_RAW);
 329   1        //
 330   1        length = set_zigbee_uart_byte(length,len / 0x100);
 331   1        length = set_zigbee_uart_byte(length,len % 0x100);
 332   1        //
 333   1        length = set_zigbee_uart_buffer(length,(unsigned char *)value,len);
 334   1        
 335   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 336   1        
 337   1        return SUCCESS;
 338   1      }
 339          
 340          /**
 341          * @brief report string type DP data to zigbee module 
 342          * @param[in]  {dpid}  dp id
 343          * @param[in]  {value} Data contents of dp 
 344          * @param[in]  {len} length of Data contents  
 345          * @return send result 
 346          */
 347          unsigned char mcu_dp_string_update(unsigned char dpid,const unsigned char value[],unsigned short len)
 348          {
 349   1        unsigned short length = 0;
 350   1        
 351   1        length = set_zigbee_uart_byte(length,dpid);
 352   1        length = set_zigbee_uart_byte(length,DP_TYPE_STRING);
 353   1        //
 354   1        length = set_zigbee_uart_byte(length,len / 0x100);
 355   1        length = set_zigbee_uart_byte(length,len % 0x100);
 356   1        //
 357   1        length = set_zigbee_uart_buffer(length,(unsigned char *)value,len);
 358   1        
 359   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 360   1        
 361   1        return SUCCESS;
 362   1      }
 363          
 364          /**
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 7   

 365          * @brief report raw type DP data to zigbee module 
 366          * @param[in]  {dpid}  dp id
 367          * @param[in]  {value} Data contents of dp 
 368          * @return send result 
 369          */
 370          unsigned char mcu_dp_value_update(unsigned char dpid,unsigned long value)
 371          {
 372   1        unsigned short length = 0;
 373   1        
 374   1        length = set_zigbee_uart_byte(length,dpid);
 375   1        length = set_zigbee_uart_byte(length,DP_TYPE_VALUE);
 376   1        //
 377   1        length = set_zigbee_uart_byte(length,0);
 378   1        length = set_zigbee_uart_byte(length,4);
 379   1        //
 380   1        length = set_zigbee_uart_byte(length,value >> 24);
 381   1        length = set_zigbee_uart_byte(length,value >> 16);
 382   1        length = set_zigbee_uart_byte(length,value >> 8);
 383   1        length = set_zigbee_uart_byte(length,value & 0xff);
 384   1        
 385   1        zigbee_uart_write_frame(DATA_REPORT_CMD,length);
 386   1        
 387   1        return SUCCESS;
 388   1      }
 389          
 390          /**
 391          * @brief mcu get bool type value from zigbee translate 
 392          * @param[in]  {value}  data of dp
 393          * @param[in]  {len} Data length
 394          * @return  true or false
 395          */
 396          unsigned char mcu_get_dp_download_bool(const unsigned char value[],unsigned short len)
 397          {
 398   1        return(value[0]);
 399   1      }
*** WARNING C280 IN LINE 396 OF mcu_sdk\mcu_api.c: 'len': unreferenced local variable
 400          
 401          /**
 402          * @brief mcu get enum type value from zigbee translate 
 403          * @param[in]  {value}  data of dp
 404          * @param[in]  {len} Data length
 405          * @return  enum data
 406          */
 407          unsigned char mcu_get_dp_download_enum(const unsigned char value[],unsigned short len)
 408          {
 409   1        return(value[0]);
 410   1      }
*** WARNING C280 IN LINE 407 OF mcu_sdk\mcu_api.c: 'len': unreferenced local variable
 411          
 412          /**
 413          * @brief mcu get value type value from zigbee translate 
 414          * @param[in]  {value}  data of dp
 415          * @param[in]  {len} Data length
 416          * @return  value data
 417          */
 418          unsigned long mcu_get_dp_download_value(const unsigned char value[],unsigned short len)
 419          {
 420   1        return(byte_to_int(value));
 421   1      }
*** WARNING C280 IN LINE 418 OF mcu_sdk\mcu_api.c: 'len': unreferenced local variable
 422          
 423          
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 8   

 424          /**
 425          * @brief mcu start zigbee module test 
 426          * @param[in]  {channel} test channel usually 11
 427          * @return void
 428          */
 429          void mcu_start_zigbee_test(unsigned char channel)
 430          {
 431   1        zigbee_uart_tx_buf[DATA_START] = channel; 
 432   1        zigbee_uart_write_frame(ZIGBEE_RF_TEST_CMD,1);
 433   1      }
 434          
 435          /**
 436          * @brief mcu reset zigbee module 
 437          * @param[in]  {void} 
 438          * @return void
 439          */
 440          void mcu_reset_zigbee(void)
 441          {
 442   1        unsigned short length = 0;
 443   1      
 444   1        length = set_zigbee_uart_byte(length,0);
 445   1        zigbee_uart_write_frame(ZIGBEE_CFG_CMD, length);
 446   1      }
 447          
 448          /**
 449          * @brief mcu start zigbee module 
 450          * this commond must be call after reveived checking proudect info, or after get zigbee network info
 451          * @param[in]  {void} 
 452          * @return void
 453          */
 454          void mcu_network_start(void)
 455          {
 456   1        unsigned short length = 0;
 457   1      
 458   1        length = set_zigbee_uart_byte(length,1);
 459   1        zigbee_uart_write_frame(ZIGBEE_CFG_CMD, length);
 460   1      }
 461          
 462          /**
 463          * @brief copy receive data from uart receive interrupt
 464          * @param[in]  {value} Data received from interrupt
 465          * @return void 
 466          */
 467          void uart_receive_input(unsigned char value)
 468          {
 469   1      //  #error "please call this fuction in the interrupt fuction of serial receive, and delete this line"
 470   1      
 471   1          if(1 == queue_out - queue_in) {
 472   2              //queue full
 473   2          }else if((queue_in > queue_out) && ((queue_in - queue_out) >= sizeof(zigbee_queue_buf))) {
 474   2              //queue full
 475   2          }else {
 476   2              //queue not full
 477   2              if(queue_in >= (unsigned char *)(zigbee_queue_buf + sizeof(zigbee_queue_buf))){
 478   3                  queue_in = (unsigned char *)(zigbee_queue_buf);
 479   3              }
 480   2              *queue_in ++ = value;
 481   2          }
 482   1      }
 483          
 484          
 485          /**
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 9   

 486          * @brief init paramter and set rx_buf with zero
 487          * @param[in]  {void}
 488          * @return void 
 489          */
 490          void zigbee_protocol_init(void)
 491          {
 492   1      //  #error "please call this fuction in main init"
 493   1      
 494   1        queue_in = (unsigned char *)zigbee_queue_buf;
 495   1        queue_out = (unsigned char *)zigbee_queue_buf;
 496   1      }
 497          
 498          /**
 499          * @brief read byte from zigbee_queue_buf array
 500          * @param[in]  {void}
 501          * @return read byte value
 502          */
 503          unsigned char Queue_Read_Byte(void)
 504          {
 505   1          unsigned char value;
 506   1          
 507   1          if(queue_out != queue_in) {
 508   2              //have data in queue
 509   2              if(queue_out >= (unsigned char *)(zigbee_queue_buf + sizeof(zigbee_queue_buf))) {
 510   3                  queue_out = (unsigned char *)(zigbee_queue_buf);
 511   3              }
 512   2              value = *queue_out ++;   
 513   2          }
 514   1          
 515   1          return value;
 516   1      }
 517          
 518          /**
 519           * @brief  check rx buffer is empty or not
 520           * @param  Null
 521           * @return the queue state
 522           */
 523          unsigned char with_data_rxbuff(void)
 524          {
 525   1          if(queue_out != queue_in)
 526   1              return 1;
 527   1          else
 528   1              return 0;
 529   1      }
 530          
 531          
 532          /**
 533          * @brief uart receive data handle, call this function at mian loop 
 534          * @param[in]  {void}
 535          * @return void 
 536          */
 537          void zigbee_uart_service(void)
 538          {
 539   1      //    #error "please call this fucntion in main while(1){}, and delete this line" 
 540   1          static unsigned short rx_in = 0;
 541   1          unsigned short offset = 0;
 542   1          unsigned short rx_value_len = 0;  
 543   1          unsigned short protocol_version = 0, protocol_head_len = PROTOCOL_HEAD;
 544   1      
 545   1          while((rx_in < sizeof(zigbee_uart_rx_buf)) && (with_data_rxbuff() > 0)){
 546   2              zigbee_uart_rx_buf[rx_in++] = Queue_Read_Byte();
 547   2          }
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 10  

 548   1      
 549   1          if(rx_in < PROTOCOL_HEAD){
 550   2              return;
 551   2          }
 552   1      
 553   1          while((rx_in - offset) >= PROTOCOL_HEAD){
 554   2              if(zigbee_uart_rx_buf[offset + HEAD_FIRST] != FIRST_FRAME_HEAD){
 555   3                  offset++;
 556   3                  continue;
 557   3              }
 558   2      
 559   2              if(zigbee_uart_rx_buf[offset + HEAD_SECOND] != SECOND_FRAME_HEAD){
 560   3                  offset++;
 561   3                  continue;
 562   3              }
 563   2      
 564   2              protocol_version = zigbee_uart_rx_buf[offset + PROTOCOL_VERSION];
 565   2      
 566   2             if(protocol_version != SERIAL_PROTOCOL_VER) /*version 2 is more than two byte  sequence number than
             - version 1*/
 567   2              {
 568   3                  offset += 2; 
 569   3                  continue;
 570   3              }
 571   2      
 572   2              rx_value_len =  zigbee_uart_rx_buf[offset + LENGTH_HIGH ] * 0x100;
 573   2              rx_value_len += (zigbee_uart_rx_buf[offset + LENGTH_LOW] + PROTOCOL_HEAD);
 574   2      
 575   2              if(rx_value_len > sizeof(zigbee_uart_rx_buf)){
 576   3                  offset += 3;
 577   3                  continue;
 578   3              }
 579   2      
 580   2              if((rx_in - offset) < rx_value_len){
 581   3                  break;
 582   3              }
 583   2      
 584   2              if( get_check_sum((unsigned char *)zigbee_uart_rx_buf + offset, rx_value_len - 1) != zigbee_uart_r
             -x_buf[offset + rx_value_len - 1]){
 585   3                  offset += 3; 
 586   3                  continue;
 587   3              }
 588   2      
 589   2              data_handle(offset);
 590   2              offset += rx_value_len;
 591   2          }
 592   1          rx_in -= offset;
 593   1      
 594   1          if(rx_in > 0){
 595   2          if((offset == 0)  && (rx_in >= sizeof(zigbee_uart_rx_buf))){
 596   3                  offset++;
 597   3                  rx_in -= offset;
 598   3              }
 599   2          my_memcpy((char*)zigbee_uart_rx_buf, (const char *)zigbee_uart_rx_buf + offset, rx_in);
 600   2          }
 601   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3430    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2     106
C51 COMPILER V9.60.0.0   MCU_API                                                           07/09/2023 22:10:34 PAGE 11  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
